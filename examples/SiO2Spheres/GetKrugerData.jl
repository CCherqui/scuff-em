#
# GetKrugerData.jl -- a simple script to evaluate Matthias Kruger's 
#                  -- trace formulas for power radiation of a single
#                  -- sphere and for heat transfer and non-equilibrium
#                  -- force between two spheres
#

###################################################
###################################################
###################################################
function EpsSIO2_Krueger(w)
  A1              = 8.2736e+13;
  w01             = 8.54484e+13;
  G1              = 8.46448e+12;
  A2              = 1.58004e+14;
  w02             = 2.029e+14;
  G2              = 1.06449e+13;
  A3              = 3.39786e+13;
  w03             = 1.51198e+14;
  G3              = 8.33205e+12;
  EpsInf          = 2.03843;

  EpsInf + A1*A1/(w01*w01 - w*w - im*w*G1) + A2*A2/(w02*w02 - w*w - im*w*G2) + A3*A3/(w03*w03 - w*w - im*w*G3);
end

###################################################
# returns (T_1^M, T_1^N)
###################################################
function GetTMatrixElements(Omega)

  kR = Omega;

  kR3 = kR*kR*kR;
  kR5 = kR3*kR*kR;
  kR6 = kR5*kR;

  Eps = EpsSIO2_Krueger(Omega);
  Mu  = 1.0;
 
   Factor1 = 2.0*(Eps-1.0)/ ( 3.0*(Eps+2.0 ));
   Factor2 = (2.0 - 3.0*Eps + Eps*Eps*(1.0+Mu) ) / (5.0*(2.0+Eps)*(2.0+Eps));
   Factor3 = -4.0*(Eps-1.0)*(Eps-1.0) / (9.0 * (2.0+Eps)*(2.0+Eps));

  TN = im*Factor1*kR3 + 2.0*im*Factor2*kR5 + Factor3*kR6;

  Mu  = Eps;
  Eps = 1.0;

  Factor1 = 2.0*(Eps-1.0)/ ( 3.0*(Eps+2.0) );
  Factor2 = (2.0 - 3.0*Eps + Eps*Eps*(1.0+Mu) ) / (5.0*(2.0+Eps)*(2.0+Eps));
  Factor3 = -4.0*(Eps-1.0)*(Eps-1.0) / (9.0 * (2.0+Eps)*(2.0+Eps));

  TM = im*Factor1*kR3 + 2.0*im*Factor2*kR5 + Factor3*kR6;

  (TM, TN)

end 

###################################################
# returns (Phi_{PRad}, Phi_{PTransfer}, Phi_F^{1->2}, Phi_F^{2->2})
###################################################
function GetFluxes(Omega)

  ##################################################
  ##################################################
  ##################################################
  kd  = Omega;
  kd2 = kd*kd;
  kd3 = kd2*kd;
  kd4 = kd3*kd;
  kd5 = kd4*kd;
  kd6 = kd5*kd;
  
  ##################################################
  ##################################################
  ##################################################
  (TM,TN) = GetTMatrixElements(Omega);
  T=[TM; TN];

  ##################################################
  ##################################################
  ##################################################
  ReTpT2    = zeros(2);
  ReTpT2[1] = real(TM) + (abs(TM))^2;
  ReTpT2[2] = real(TN) + (abs(TN))^2;

  ##################################################
  ##################################################
  ##################################################
  PRad = -2.0*3.0*( ReTpT2[1] + ReTpT2[2] ) / pi; 
  
  ##################################################
  ##################################################
  ##################################################
  Ua=9.0/(2.0*kd2) + 9.0/(2.0*kd4);
  Ub=27.0/(2.0*kd6);
  PTransfer = 0.0;
  for p=1:2, pPrime=1:2
    U = ( (p==pPrime) ? Ua+Ub : Ua );
    PTransfer += 2.0 * ReTpT2[p] * ReTpT2[pPrime] * U;
  end
  
  ##################################################
  ##################################################
  ##################################################
  F12=0.0;
  F22=0.0;

  ##################################################
  ##################################################
  ##################################################
  (PRad, PTransfer, F12, F22)
end


###################################################
###################################################
###################################################
f=open("KrugerData.out","w");
for Omega in 0.01:0.01:10
  (PR, PT, F12, F22)=GetFluxes(Omega);
  @printf(f,"%e %e %e %e %e \n",Omega,PR,PT,F12,F22);
end
close(f);
